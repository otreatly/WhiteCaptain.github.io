[{"path":"/2025/07/20/Adaptive kalman filtering algorithms for integrating GPS and low cost IN/","content":"Adaptive kalman filtering algorithms for integrating GPS and low cost INS 研究背景与问题 低成本惯性导航系统（INS）因传感器误差大且时变，难以直接用于高精度导航。传统卡尔曼滤波（CKF）采用固定的噪声矩阵，无法适应动态变化的噪声特性，导致初始化时间长、姿态对准精度低。本文提出三种自适应卡尔曼滤波算法，通过实时调整噪声模型提升GPS与INS集成的性能。 核心方法 过程噪声缩放（Process Noise Scaling） 原理：根据创新序列（INS预测与GPS观测的差异）动态缩放过程噪声协方差矩阵 (Q_k)，公式为： [P_{k}^{(-)} = P_{k-1}{(+)}{T} + S_{k}Q_{k-1}] 其中缩放因子 (S_k) 通过历史创新序列的方差比计算。 优势：计算简单，实时性强，显著缩短INS初始化时间。 多模型自适应估计（MMAE） 原理：并行运行多个不同噪声模型的卡尔曼滤波器，基于残差概率动态加权融合各滤波器输出。 实现：设置6个滤波器（(Q_k) 缩放因子从0.1到10000），引入最小概率阈值防止模型退化。 优势：适应性强，可处理复杂动态场景，但计算量较大。 自适应卡尔曼滤波器（AKF） 原理：通过状态修正序列 (x_k = K_k v_k^{(-)}) 估计过程噪声协方差，公式为： [*k {k}x_jx_j{T}] 局限：对未建模误差（如传感器轴偏差、振动）敏感，试验中表现不佳。 实验设计与结果 试验场景：英国普利茅斯海域小型测量船，配备低成本Crossbow MEMS IMU与高精度POS/MV系统（作为真值）。 数据采集：固定GPS模糊度，基线距离3km，记录10分钟初始化机动（8字转向）及后续直线航行数据。 关键结果 过程噪声缩放： 偏航角（Yaw）对准时间从CKF的10分钟以上缩短至275秒，误差降低30%（0.36° vs. 0.52°）。 横滚（Roll）与俯仰（Pitch）误差与CKF相当（0.04°）。 MMAE： 初始化时间303秒，偏航误差0.45°，略优于CKF但逊于过程噪声缩放。 动态场景下能自适应切换噪声模型（如转向时选择大缩放因子模型）。 AKF： 因未建模误差（如杠杆臂偏差）导致姿态误差大于CKF，需进一步优化参数估计策略。 结论与意义 有效性：过程噪声缩放与MMAE显著提升INS初始化效率及动态性能，适合低成本INS与GPS集成。 局限性：AKF需更精确的误差建模；MMAE计算复杂度高，需硬件并行支持。 应用价值：为低成本导航系统提供实用化解决方案，减少对高冗余硬件的依赖。 未来方向 增强算法鲁棒性，处理未建模误差（如传感器振动、轴偏差）。 优化计算效率，探索并行化或简化模型实现。 结合多传感器融合（如视觉、里程计）提升复杂环境适应性。 图表亮点 图4：创新序列显示初始化阶段误差达20cm，验证自适应算法的必要性。 图6：过程噪声缩放使偏航角快速收敛，CKF则持续波动。 图7：MMAE在机动阶段动态切换模型，体现其自适应能力。 本文通过理论创新与实证分析，为低成本导航系统的工程化提供了重要参考。"},{"path":"/2025/07/20/A Novel Adaptive Kalman Filter With Inaccurate Process and Measurement Noise Covariance Matrices/","content":"A Novel Adaptive Kalman Filter With Inaccurate Process and Measurement Noise Covariance Matrices 作者：Yulong Huang, Yonggang Zhang, Zhemin Wu, Ning Li, Jonathon Chambers 发表信息：IEEE Transactions on Automatic Control, 2018 1. 研究背景与问题 传统卡尔曼滤波（KF）依赖准确的噪声统计信息（过程噪声协方差矩阵 Qk 和测量噪声协方差矩阵 Rk），但在实际应用中，噪声统计常未知或时变，导致滤波性能下降甚至发散。现有自适应方法（如Sage-Husa AKF、IAKF、MMAKF）存在局限性： - Sage-Husa AKF：无法保证协方差收敛，可能发散； - IAKF：需大量数据窗口，不适用于快速时变噪声； - MMAKF：计算复杂度过高； - 现有VBAKF：仅能估计测量噪声协方差，假设过程噪声协方差准确。 本文提出一种新型变分贝叶斯自适应卡尔曼滤波（VBAKF），通过引入逆Wishart先验，联合估计状态、预测误差协方差矩阵（PECM）和测量噪声协方差矩阵（MNCM），解决PNCM和MNCM同时不准确的问题。 2. 核心方法 2.1 模型定义 考虑线性高斯状态空间模型： 目标：联合估计状态 xk、PECM Pk|k − 1 和 MNCM Rk。 2.2 先验分布选择 PECM先验：逆Wishart分布 参数通过名义PNCM Q̃k 和调节参数 τ 确定： 其中 。 MNCM先验：逆Wishart分布 参数通过遗忘因子 ρ 递推更新： 2.3 变分近似与迭代更新 通过变分贝叶斯方法，将联合后验分布近似分解为： p(xk, Pk|k − 1, Rk|z1 : k) ≈ q(xk)q(Pk|k − 1)q(Rk) 通过最小化Kullback-Leibler散度（KLD），交替更新各分量的参数： 更新PECM分布： 参数更新公式： $$ k^{(i+1)} = {k|k-1} + 1, _k^{(i+1)} = k^{(i)} + {k|k-1} $$ 其中 Ak(i) 为状态预测误差的期望协方差矩阵。 更新MNCM分布： 参数更新公式： 其中 Bk(i) 为测量残差的期望协方差矩阵。 更新状态分布： 通过修正的卡尔曼增益更新： 2.4 算法流程 预测步骤： 状态预测： PECM预测： 更新逆Wishart先验参数。 更新步骤： 固定点迭代（通常3-5次）： 计算修正的PECM 和 MNCM ； 更新卡尔曼增益 Kk(i + 1)； 更新状态估计 和协方差 Pk|k(i + 1)。 3. 参数选择与稳定性 调节参数 τ：控制先验PECM的权重，建议 τ ∈ [2, 6]； 遗忘因子 ρ：控制MNCM的时间波动性，建议 ρ ∈ [0.9, 1]； 名义PNCM Q̃k 和初始MNCM R̃0：需接近真实值以保证收敛； 迭代次数 N：通常 N ≥ 6 可保证收敛。 4. 仿真验证 4.1 实验设置 模型：二维目标跟踪，状态为位置和速度； 噪声：时变PNCM和MNCM（余弦调制）； 对比方法：KFNCM（固定名义协方差）、VBAKF-R（仅估计MNCM）、本文VBAKF。 4.2 结果分析 RMSE：VBAKF在位置和速度的RMSE分别比VBAKF-R降低54.5%和22.4%，接近真实协方差的KFTCM； 协方差估计：PECM和MNCM的SRNFN分别降低18.7%和60%； 计算效率：单步耗时 5.6 × 10−4 秒，高于VBAKF-R但精度显著提升。 5. 创新点与贡献 联合估计：首次在VB框架下同时估计状态、PECM和MNCM； 逆Wishart先验：利用共轭性简化后验分布形式； 鲁棒性：对PNCM和MNCM的不确定性具有强鲁棒性； 参数自适应：通过调节 τ 和 ρ 平衡先验与观测信息。 6. 局限与展望 计算复杂度：高于传统KF，需优化迭代次数； 先验依赖：名义PNCM需接近真实值； 扩展方向：非线性系统、多传感器融合、硬件加速。 参考文献： 文中引用包括经典KF理论、自适应滤波方法（Sage-Husa, IAKF）及变分贝叶斯相关研究（如Särkkä等），共25篇。"},{"path":"/2025/07/20/The interacting multiple model algorithm for systems with markovian switching coefficients/","content":"The interacting multiple model algorithm for systems with markovian switching coefficients 介绍的IMM——–为了克服系统可能会遇到不同类型的潜在故障，例如单个执行器故障、单个传感器故障以及同时传感器或执行器故障等，这些故障无法通过单个数学模型进行适当建模的问题，引入了由连续和离散机制驱动的随机混合系统。对于此类系统，最有效的 FDD 方法之一是基于交互多模型 （IMM） 方法，其中作一组模型匹配的卡尔曼滤波器 （KF） 来提供总体估计 1. 问题背景 研究目标是设计一种高效的滤波算法，用于如下线性系统： 系统模型： [x_t = a(i)x{t-1} + b(_i)w_t ] 观测模型： [y_t = h(_i)x_t + g(_i)v_t ] 其中： (_i) 是一个有限状态的马尔可夫链，取值于 ({1, , N})，其转移概率矩阵为 (H)。 (w_t) 和 (v_t) 是相互独立的高斯白噪声。 核心挑战：传统精确滤波算法（如卡尔曼滤波的扩展形式）的假设数量会随时间呈指数增长，导致计算复杂度不可行。 2. 现有方法的不足 假设管理问题：传统方法通过“剪枝”（pruning）或“合并”（merging）减少高斯假设数量，例如： 检测估计（DE）算法 广义伪贝叶斯（GPB）算法 缺点：在计算负载适中的情况下，性能不佳。 模型近似方法：如改进的多模型（MM）算法、修正增益扩展卡尔曼（MGEK）滤波等。 缺点：在多数场景中仍无法兼顾性能与计算效率。 3. 新思路：调整假设减少的时机 传统方法在测量更新后立即减少假设，但研究发现时机选择是关键创新点： IMM（交互多模型）算法：通过动态合并假设，优化时机选择，降低复杂度。 AFMM（自适应多模型遗忘）算法：通过剪枝减少假设数量。 优势： IMM算法通过合并而非剪枝，保留了更多有效信息，性能更优。 在动态多模型（MM）场景中，IMM的推导更简洁，计算效率更高。 4. 验证与结论 蒙特卡洛模拟：用于评估IMM算法的性能，验证其在多模型滤波领域的先进性。 意义：IMM算法通过优化假设管理时机，显著提升了滤波的实时性和准确性，成为该领域的重要进展。 关键术语解释 **马尔可夫链(_i)**：决定系统参数(a, b, h, g)的动态切换模式。 假设指数增长：每一步可能产生(N)个新假设（(N)为(_i)的状态数），导致(N^t)种可能路径。 剪枝 vs. 合并：剪枝直接删除低概率假设，合并则将相似假设融合为单一高斯分布。 总结 该研究针对马尔可夫跳变系统的滤波问题，提出通过优化假设管理时机（如IMM算法）来平衡计算复杂度和性能，解决了传统方法假设爆炸的难题，为实际工程应用提供了更高效的解决方案。"},{"path":"/2025/07/20/Risk-sensitive filtering for jump Markov linear systems/","content":"Risk-sensitive filtering for jump Markov linear systems 1. 系统模型与参考概率方法 1.1 系统动态方程 跳马尔可夫线性系统（JMLS）的状态与观测方程： $$ $$ - xk ∈ ℝn：连续状态，初始分布x0 ∼ 𝒩(x̄0, Σ0) - rk ∈ {e1, …, eN}：离散模态，服从转移矩阵Π的马尔可夫链 - wk ∼ 𝒩(0, In), vk ∼ 𝒩(0, Im)：独立高斯噪声 1.2 参考概率测度 定义参考测度，使得在下： - xk和yk独立且服从标准高斯分布 - 模态转移仍由Π控制 通过Radon-Nikodym导数调整测度： 其中λ̄l为调整因子，将原系统的噪声特性映射到参考测度下。 2. IMM滤波器的参考概率框架推导 2.1 未归一化密度函数 定义αkj(x)为在模态rk = ej下，状态xk的未归一化密度： 递推公式（定理1）： 解释：通过贝叶斯定理，将当前观测yk与前一时刻的状态z结合，考虑模态转移概率πij。 2.2 IMM近似 为避免指数爆炸，假设αkj(x)为单一高斯分布： αkj(x) = c̄kj𝒩(x; x̂k|kj, Σk|kj) 通过混合前一步的估计： - 解释：将多模型混合近似为单一高斯，以简化计算。 -– 3. 风险敏感滤波（RS-IMM）的扩展 3.1 风险敏感目标函数 定义风险敏感估计： - 核心思想：通过指数加权强调大估计误差，提升对模型不确定性的鲁棒性。 3.2 未归一化密度函数 定义γkj(x)为风险敏感框架下的未归一化密度： 递推公式（定理5）： - 关键区别：引入指数项exp (θ⋅)，放大历史误差的影响。 3.3 修改步骤（Modification Step） 混合估计的修正： Σ̃k − 1|k − 10j = [(Σk − 1|k − 10j)−1 − θQk − 1]−1 x̃k − 1|k − 10j = Σ̃k − 1|k − 10j[(Σk − 1|k − 10j)−1x̂k − 1|k − 10j + θQk − 1x̂k − 1|k − 1RS] - 物理意义：通过θQk − 1调整协方差，使估计偏向风险敏感的历史最优估计x̂RS。 -– 4. 最终估计计算 4.1 近似方案1（RS-IMM1） 假设近似为单一高斯分布： - 特点：直接继承IMM的混合权重，计算高效。 4.2 近似方案2（RS-IMM2） 通过泰勒展开exp (x) ≈ 1 + x，得到加权最小二乘解： 其中。 - 特点：显式考虑协方差修正，但计算更复杂。 -– 5. 性能对比与仿真结果 - IMM vs RS-IMM：在参数不确定时（如加速度模型失配），RS-IMM通过θ调节对历史误差的敏感度，显著降低速度估计误差（仿真中误差减少约10 m/s）。 - 收敛条件：需满足θ (Σk|kj)−1Qk−1，确保协方差修正后的正定性。 -– 总结 - IMM核心：多模型混合 + 高斯近似，平衡计算与精度。 - RS-IMM创新：引入指数代价函数，通过修改步骤动态调整估计偏向，提升鲁棒性。 - 工程意义：适用于模型参数不确定、噪声统计未知的场景，如目标跟踪中的强机动检测。 通过参考概率框架，论文统一了IMM与风险敏感滤波的推导，为跳马尔可夫系统提供了灵活的估计工具。"},{"path":"/2025/07/20/Recursive Noise Adaptive Kalman Filtering by Variational Bayesian Approximations  /","content":"Recursive Noise Adaptive Kalman Filtering by Variational Bayesian Approximations 1. 研究背景与问题 传统卡尔曼滤波（KF）及其扩展（EKF、UKF）要求噪声统计参数（如方差）完全已知，但实际应用中噪声参数常为时变或未知。传统自适应滤波方法（如状态增强、多模型IMM、粒子滤波）虽能解决此问题，但存在计算复杂度高或适用范围受限的缺陷。本文提出一种基于变分贝叶斯（Variational Bayesian, VB）框架的自适应卡尔曼滤波算法（VB-AKF），通过递归近似联合后验分布，实现状态与噪声参数的联合估计，兼顾计算效率与精度。 2. 核心方法 2.1 模型定义 考虑线性高斯状态空间模型： 其中，观测噪声协方差矩阵为对角阵 Σk = diag(σk, 12, …, σk, d2)，且噪声方差 σk, i2 为时变随机参数，服从独立动态模型。 2.2 变分贝叶斯近似 目标：近似联合后验分布 p(xk, Σk|y1 : k)。 假设后验分布可分解为状态与噪声方差的乘积形式： p(xk, Σk|y1 : k) ≈ Qx(xk)QΣ(Σk) 其中： Qx(xk) 为高斯分布 𝒩(xk|mk, Pk)； QΣ(Σk) 为独立逆伽马分布的乘积 。 通过最小化KL散度 KL[QxQΣ∥p(xk, Σk|y1 : k)]，推导出参数更新方程： - 状态更新：卡尔曼滤波公式 $$ $$ 噪声方差更新：逆伽马分布参数迭代 其中，Σ̂k = diag(βk, 1/αk, 1, …, βk, d/αk, d) 为噪声协方差的期望估计。 2.3 启发式方差动态模型 为保持后验分布形式，设计方差参数的动态模型： αk, i− = ρiαk − 1, i, βk, i− = ρiβk − 1, i 其中，ρi ∈ (0, 1] 控制方差的时间波动性（ρ = 1 表示方差恒定，ρ 1 允许方差随时间变化）。 2.4 VB-AKF算法流程 算法步骤： 1. 预测： - 状态预测：标准KF预测方程； - 方差预测：通过 αk, i− = ρiαk − 1, i 和 βk, i− = ρiβk − 1, i 更新。 更新： 初始化：mk(0) = mk−, Pk(0) = Pk−, , βk, i(0) = βk, i−； 定点迭代（通常2-3次）： 计算 Σ̂k(n) = diag(βk, i(n)/αk, i)； 更新状态参数 mk(n + 1), Pk(n + 1)； 更新方差参数 βk, i(n + 1)。 3. 实验验证 3.1 仿真模型 采用随机谐振器模型，观测噪声方差随时间突变（0.2 → 1 → 0.2），对比方法包括： - VB-AKF（ρ = 1 − e−4，迭代次数 N = 2）； - IMM算法（111个噪声模型，指数衰减模式转移概率）； - 标准KF（固定噪声方差）。 ##### 3.2 结果分析 - 估计精度：VB-AKF与IMM均能跟踪方差突变，IMM略优但计算成本高100倍； - 计算效率：VB-AKF耗时约为IMM的1%，且优于固定方差的KF； - 鲁棒性：VB-AKF对噪声动态模型假设不敏感，适用于低维测量场景。 4. 方法扩展与讨论 非线性扩展：通过替换KF为EKF或UKF，可推广至非线性系统； 与协方差匹配方法的联系：VB-AKF通过残差一致性估计噪声参数，与协方差匹配思想类似； 局限性：高维测量场景下计算复杂度仍可能较高，需进一步优化。 5. 总结与贡献 核心贡献：提出一种基于变分贝叶斯的自适应卡尔曼滤波框架，实现状态与噪声方差的联合递归估计； 优势：计算效率高（定点迭代收敛快）、适用于时变噪声、可扩展至非线性系统； 应用场景：低成本传感器融合（如GPS/INS）、故障容错系统等。 参考文献： 文中引用包括经典KF理论（Kalman, 1960）、自适应滤波（Mehra, 1972）、变分贝叶斯方法（Smidl Quinn, 2006）等，共25篇。"},{"path":"/2025/07/20/Linear matrix inequality optimization approach to exponential robust filtering for switched hopfield neural networks/","content":"Linear matrix inequality optimization approach to exponential robust filtering for switched hopfield neural networks 摘要 本文关注具有时滞的切换 Hopfield 神经网络的时滞相关指数鲁棒滤波问题。提出了一种新的时滞相关切换指数鲁棒滤波器，该滤波器导致具有保证鲁棒性能的指数稳定滤波误差系统。这些类型神经网络的切换指数鲁棒滤波器的设计可以通过求解线性矩阵不等式（LMI）来实现，这可以使用标准数值包轻松实现。给出了一个示例来说明所提出滤波器的有效性。 建立在先前研究的基础上 这些神经网络的指数稳定性在5中未进行研究。然而，本文在定理 3 的证明中展示了滤波误差系统的指数稳定性。 对早期声明的反驳 参考文献5讨论了权重矩阵的自适应学习问题。因此，[参考文献5]中的结果不能应用于滤波问题。 因此，5中的结果不能应用于滤波问题。与5中的结果相比，本文考虑了切换 Hopfield 神经网络的滤波问题。 在论文中，我们提出了一种新的切换指数 H∞滤波器用于这些神经网络。论文中提出的滤波器形式、LMI 条件、Lyapunov-Krasovskii 泛函、指数稳定性以及应用实例与文献5中的不同。 未来工作 减少LMI保守性（如结合自由权矩阵法）； 离散时间SHNN的滤波设计； 多时滞与随机切换场景的扩展。 关键方法与理论贡献 滤波器设计 结构：基于切换信号的多模态滤波器，形式为： x˙(t)=∑i=1Nξi(t)[Aix(t)+Wiϕ(x(t−τ))+L(y(t)−y^(t))]x˙(t)=i=1∑*N**ξi(t*)[Aix^(t)+Wiϕ(x(t−τ))+L(y(t)−y(t))] 其中LL为待设计的滤波器增益矩阵。 目标：通过增益LL使滤波误差e(t)=x(t)−x(t)e(t)=x(t)−x(t)满足指数稳定性和H∞性能。 Lyapunov-Krasovskii泛函与LMI条件 构造新型泛函：结合时滞项与指数权重项，形式为： V(t)=exp⁡(κt)eT(t)Pe(t)+积分项（含时滞状态与干扰）V(t)=exp(κt)eT(t)Pe(t)+积分项（含时滞状态与干扰） 稳定性分析：通过Jensen不等式和矩阵变换，导出保证指数稳定性和H∞性能的LMI条件： [块矩阵（含时滞、增益、干扰项）]0[块矩阵（含时滞、增益、干扰项）]0 滤波器增益求解：通过LMI可行解M=PLM=PL，反推L=P−1ML=P−1M。 理论优势 时滞相关：直接处理时滞影响，避免保守性； 指数稳定性：误差以指数速率收敛； H∞性能：干扰衰减水平γγ可调。 关键点 这篇论文的局限性包括 LMI 条件的潜在保守性，如果κ和γ分别被选为较大和较小，这种保守性可能会增加。 未来工作包括通过使用增强的 Lyapunov-Krasovskii 泛函和自由加权矩阵方法来减少 LMI 条件的保守性。 这项研究的实际应用领域包括具有时延的切换 Hopfield 神经网络的估计与控制。所提出的滤波器可用于多个领域，如机械系统控制、汽车工业、开关电源转换器以及其他许多领域。 这篇论文的实际应用包括设计具有时间延迟的切换 Hopfield 神经网络的滤波器，这些滤波器可用于信号处理和控制系统等各个领域。 关键概念 #指数稳定性; #时间延迟; #神经网络; #线性矩阵不等式; #声明/滤波问题; #滤波问题 引用 本文提出了一种新的切换指数 H∞滤波器，用于具有时间延迟的切换 Hopfield 神经网络，该滤波器保证了滤波误差系统的指数稳定性，并具有指定的 H∞性能水平。 关键发现 该研究的关键发现是开发了一种针对具有时延的切换 Hopfield 神经网络的指数 H∞滤波器设计的方法，以及提出了一种新的可通过对线性矩阵不等式（LMI）进行求解来设计的时延相关指数 H∞滤波器。该滤波器被证明是指数稳定的，并保证了 H∞性能。 本文的主要发现包括开发了一种新的切换指数 H∞滤波器、构建了一种新的李雅普诺夫-克拉索夫斯基泛函以及通过求解一个时延相关的 LMI 来确定滤波器增益矩阵。 我们已通过开发一种新型指数 H∞滤波器来解决具有时延的切换 Hopfield 神经网络的指数 H∞滤波问题 新 Lyapunov–Krasovskii 函数的正确构造表明，滤波误差系统具有保证的 H∞性能，并呈指数稳定 提出的成果预期可扩展到离散时间切换 Hopfield 神经网络 目标 本研究的目的是设计一个在 H∞意义上保证性能的适合于切换 Hopfield 神经网络的滤波器，具体来说，要找到一个合适的滤波器，使得滤波误差系统是指数稳定的，并且具有保证的 H∞性能。 方法 本研究采用的方法包括构建一个新的李雅普诺夫-克拉索夫斯基泛函，以及使用线性矩阵不等式（LMI）来设计滤波器。通过求解线性矩阵不等式（LMI），可以实现所需切换指数 H∞滤波器的设计，这可以通过标准数值算法轻松实现。 本文采用的方法包括构建一个新的李雅普诺夫-克拉索夫斯基泛函、通过求解延迟相关的 LMI 确定滤波器增益矩阵，以及使用 MATLAB LMI 控制工具箱求解 LMI。 数值仿真与验证 模型参数：双模态SHNN，时滞τ=1τ=1，非线性激活函数为双曲正切，外部干扰为高斯噪声。 LMI求解：通过MATLAB LMI工具箱，设定γ=0.4γ=0.4，获得滤波器增益： L=[0.98910.5127]L=[0.98910.5127] 仿真结果： 图1-2：真实状态x1(t)x1(t)、x2(t)x2(t)与估计值x1(t)x1(t)、x2(t)x2(t)快速收敛； 图3：滤波误差e(t)e(t)在2秒内趋于稳定，验证指数稳定性； 标准差分析：γ=0.4γ=0.4时误差标准差为0.6483（e1e1）和0.4505（e2e2），增大γγ至1.5时性能下降，符合理论预期。 结果 该研究的结果表明，所提出的滤波器具有指数稳定性，并保证 H∞性能。滤波器可以通过求解线性矩阵不等式（LMI）来设计，滤波器的增益矩阵可以表示为 L = P^(-1)M。 本文结果表明，所提出的滤波器保证了滤波误差系统的指数稳定性，并具有指定的 H∞性能水平，滤波器增益矩阵可以通过求解一个时延相关的 LMI 来确定。 发现 本文提出的成果预期可扩展到离散时间切换 Hopfield 神经网络 局限性 这篇论文的局限性包括 LMI 条件的潜在保守性，如果κ和γ分别被选为较大和较小，这种保守性可能会增加 LMI条件可能保守（未引入自由权矩阵）； 未扩展至离散时间系统。 结论 本研究的结论是，所提出的基于延迟的指数 H∞滤波器对于具有时延的切换 Hopfield 神经网络是有效的，并且可以通过求解线性矩阵不等式（LMI）来设计该滤波器。该滤波器具有保证的 H∞性能和指数稳定性。 本文结论是，所提出的切换指数 H∞滤波器在保证滤波误差系统的指数稳定性以及满足特定的 H∞性能水平方面是有效的，并且可以通过求解一个时延相关的 LMI 来确定滤波器的增益矩阵 参考文献 [1] Hopfield, J.J.: Neurons with grade response have collective computational properties like those of a two-state neurons. Proc. Natl. Acad. Sci. 81, 3088–3092 (1984) OA GScholar Scite [2] Gupta, M.M., Jin, L., Homma, N.: Static and Dynamic Neural Networks. Wiley-Interscience, New York (2003) OA GScholar [3] Huang, H., Qu, Y., Li, H.: Robust stability analysis of switched Hopfield neural networks with timevarying delay under uncertainty. Phys. Lett. A 345, 345–354 (2005) OA GScholar Scite [4] Lou, X.Y., Cui, B.T.: Delay-dependent criteria for robust stability of uncertain switched Hopfield neural networks. Int. J. Autom. Comput. 4, 304–314 (2007) OA GScholar Scite [5] Ahn, C.K.: An H∞ approach to stability analysis of switched Hopfield neural networks with timedelay. Nonlinear Dyn. 60, 703–711 (2010) OA GScholar Scite [6] Wang, Z., Ho, D.W.C., Liu, X.: State estimation for delayed neural networks. IEEE Trans. Neural Netw. 16, 279–284 (2005) OA GScholar Scite [7] He, Y., Wang, Q.G., Wu, M., Lin, C.: Delay-dependent state estimation for delayed neural networks. IEEE Trans. Neural Netw. 17, 1077–1081 (2006) OA GScholar Scite [8] Liu, Y., Wang, Z., Liu, X.: Design of exponential state estimators for neural networks with mixed time delays. Phys. Lett. A 364, 401–412 (2007) OA GScholar Scite [9] Wang, Z., Liu, Y., Liu, X.: State estimation for jumping recurrent neural networks with discrete and distributed delays. Neural Netw. 22, 41–48 (2009) OA GScholar Scite [10] Stoorvogel, A.: The H∞ Control Problem: A State-Space Approach. Prentice Hall, London (1992) OA GScholar [11] Huang, H., Feng, G.: Delay-dependent H∞ and generalized H2 filtering for delayed neural networks. IEEE Trans. Circuits Syst. I, Fundam. Theory Appl. 56, 846–857 (2009) OA GScholar Scite [12] Boyd, S., Ghaoui, L.E., Feron, E., Balakrishinan, V.: Linear Matrix Inequalities in Systems and Control Theory. SIAM, Philadelphia (1994) OA GScholar [13] Gahinet, P., Nemirovski, A., Laub, A.J., Chilali, M.: LMI Control Toolbox. The MathWorks, Inc., Natik (1995) OA GScholar Scite [14] Narendra, K.S., Tripathi, S.S.: Identification and optimization of aircraft dynamics. J. Aircr. 10, 193– 199 (1973) OA GScholar Scite [15] Noldus, E.: Stabilization of a class of distributional convolutional equations. Int. J. Control 41, 947– OA GScholar Scite [16] He, Y., Wu, M., She, J.H., Liu, G.P.: Delay-dependent robust stability criteria for uncertain neutral systems with mixed delays. Syst. Control Lett. 51, 57–65 (2004) OA GScholar Scite [17] Wu, M., He, Y., She, J.H., Liu, G.P.: Delay-dependent criteria for robust stability of time-varying delay systems. Automatica 40, 1435–1439 (2004) OA GScholar Scite"},{"path":"/2025/07/19/Latent-KalmanNet Learned kalman filtering for tracking from high dimensional signals/","content":"Latent-KalmanNet: Learned kalman filtering for tracking from high-dimensional signals 本文的方法建立在KalmanNet架构之上，所提出的Latent - KalmanNet旨在解决在部分已知动态下从复杂的高维观测值中进行跟踪的挑战。它利用数据实现可靠的跟踪，克服了测量函数和噪声统计知识的缺失。本文提出的Latent - KalmanNet算法不局限于使用瞬时估计量进行潜在特征提取，实际上可以学习到对潜在状态编码的贡献。此外，可以利用其对状态演化模型的访问来跟踪部分可观测环境下的状态。 1. 问题描述 1.1 SS模型 yt可以用于恢复xt中p ≤ m，给定一个p × 1的向量PXT，其中P是一个p × m的选择矩阵。 该论文考虑 部分可观测设置，因为可以通过令P = I和p = m使得模型的状态全部可观测，并且假设状态方差可以从yt中得到，P给出已知，即对于当前系统具有可观察到的状态变量的所有信息。 1.2 本文目标及挑战 设计一种实时状态估计的过滤算法，可应用于完全或部分可观测的SS模型，给定估计器的性能指标，x̂t使用均方误差(MSE)，定义为： E{||X̂T − XT||2} 主要处理以下四种情况： 挑战 内容 C.1 et和vt分布未知，可能为非高斯分布 C.2 使用的状态转换函数f(⋅)可能不匹配 C.3 观测维度维度高，n ≫ m，导致高复杂性影响实用性 C.4 测量函数h(⋅)未知，并且可能是非初级的。 利用标记好的数据集 训练，该轨迹由长度为 的观测值和测量值组成： 2. 算法介绍 2.1 EKF 是最常见的滤波算法之一，适用于噪声为高斯且SS模型完全已知的情况，整体框架如下： 预测步骤 状态估计更新（同EKF）： 其中， 其中： 矩阵F̂t和Ĥt分别是f(⋅)和h(⋅)的瞬时线性化： F̂t = ∇xf(x̂t − 1); Ĥt = ∇xh(x̂t|t − 1). 2.2 KalmanNet 详细见《KalmanNet: Neural Network Aided Kalman Filtering for Partially Known Dynamics》: https://otreatly.github.io/2025/07/18/KalmanNet/https://otreatly.github.io/2025/07/18/KalmanNet/ 通过让gθKG表示带有参数θ的RNN映射，将KG设置为： 𝒦t(θ) = gθKG(Δyt, Δxt − 1) 从数据集𝒟中学习RNN的权重θ，其损失函数为： ℒ = ||x̂t − xt||+λ||θ||2 2.3 Latent-KalmanNet Step 1 - 瞬时估计 用带有参数ψ的递归DNN，记作$g_{}e:n ^p ，训练其将y_t映射为可观测的状态变量P_{X_t}的估计。参数可以基于梯度优化，以监督的方式进行学习，给定正则化范数MSE损失：$ ^e_() = ^{|D|}{d=1} ^T{t=1} ||ge_ψ(y{(d)}_t) −z^{(d)}_t||^2 +λ ∥ψ∥^2 $$ Step 2 - 整合演化模型 瞬时估计忽略了部分已知的状态演化模型，由于时间相关性，将状态演化函数f(⋅)引入，潜在改进gψe，提供的状态变量估计。 如下一个高层框架： 先验估计xt|t − 1作为DNN瞬时估计的额外特征，基于DNN的估计器采用两个多变量输入x̂t|t − 1和yt（从ℝn × ℝm映射到ℝp)： zt = gψe(yt, x̂t|t − 1) Step 3 - 瞬时估计 假设估计器输出zt和可观测状态变量PXt之间服从高斯分布，这种方法允许编码器的输出进行更总，而不需考虑C1和C2，可以通过敬爱嗯EKF与Step 2中的预训练DNN编码器级联应用来解释时间相关性。其中假设DNN经过适当的训练，使得估计值yt逼近PXt的最小MSE估计。其中DNN的输出可以近似为： zt = gψe(yt, x̂t|t − 1) ≈ Pxt + ṽt 其中，ṽt为零均值且与xt相互独立，如果其也是高斯且和时间独立，那么该系统就表示一个高斯SS模型（可能非线性），可以使用EKF对xt进行追踪。而KG计算中所需的vt二阶矩可以从DNN编码器的验证误差中估计出，这种情况下，测量矩阵Ĥ(t) = P，系统如下所示： Step 4 - Laten-KalmanNet 框架 上述Step 3介绍了系统基于编码器输出zt和状态xt的关系服从SS模型，考虑到误差项可能服从未知分布的事实，选择使用KalmanNet而不是EKF，本文使用的Latent-KalmanNet绕过了SS模型对噪声所需特定分布的需要，其详细结构见下： Latent-KalmanNet结构框图 关于xt的估计可以写作： x̂t = gθf(zt, x̂t − 1) 编码器和解码器( KalmanNet )通过提供一个低维的潜在表示(通过编码器)和一个获得潜在表示的先验(通过KalmanNet )来相互辅助。下面详细的训练过程鼓励整个编码器解码器的潜在表示zt是导致KalmanNet输出的最准确的状态估计的一种，而不一定是Pxt (如第1 - 3步)的最可靠的估计。一旦训练好，在推理过程中，每个时间步上的估计过程被总结为算法1。 单步Latent-KalmanNet流程 在每个时间步上不涉及雅可比计算或矩阵求逆。这表明，与其他基于模型的解决方案以及具有大量权重的数据驱动方法相比，Latent-Kalman Net非常适合应用于高维SS模型和计算受限的设备。 训练 所提出框架由两个模块串联：DNN估计器gψe(⋅)和KalmanNetgθf(⋅)。两者均可微分，能够由(θ, ψ)参数化的整体架构作为判别模型进行端到端的训练。 数据集𝒟的评价标准基于损失反响传播到KG 𝒦t计算的能力，评价标准如下： 其中λ1, λ2 0，并且： ℒt(d)(θ, ψ) = ∥x̂d(d) − xt(d)∥2 这MSE损失基于KalmanNet输出而不是gψe(⋅)的输出计算，意味着不需要学习估计可观测状态变量PXt。 模型最终的输出如下： Misplaced & \\hat{x}_t^{(d)} = g_{\\theta}^f\\left( g_{\\psi}^{e}\\left( y_t^{(d)},f(\\hat{x}_{t-1}^{d}) \\right) ,\\hat{x}_{t-1}^{(d)} \\right)\\\\ =\\hat{x_{t|t-1}^{d}+\\mathcal{K}_t(\\theta)\\cdot (z_t^{(d)}-\\hat{z}_{t|t-1}^{(d)})} 可以通过KalmanNet的输出x̂t(d)中得到给定轨迹d在给定时间步长t下相对于KG的损失梯度： 其中Δxt = xt(d) − x̂t|t − 1(d), Δzt = zt(d) − ẑt|t − 1(d)。 基于其可以将高纬观测数据yt（包括先验x̂t|t − 1）作为隐性特征输入，提出了Latent-KalmanNet： 3. 仿真优化 3.1 部分可观测的动态系统 针对一个摆进行研究： SS Modle 状态包含角度ϕt和角速度wt： xt = [ϕt, wt]T 摆的状态演化过程由机械系统定律定义，本质为高度非线性的，其方程如下： 3.2 Lorenz吸引子混沌系统 可优化空间 Latent - KalmanNet使用专用的DNN利用数据自适应地学习KG。选择使用基于RNN的架构用于KG计算块，源于此类DNN在处理时间序列时的适用性，以及它们在可训练参数数量方面的相对紧凑性。具体来说，使用相对紧凑的架构有利于在边缘设备上实现LatentKalmanNet进行实时推理[ 46 ]。也可以考虑其他架构，例如基于Transformer [ 47 ]的架构，尽管与基于RNN的架构相比，它们预计会以增加参数化和复杂性为代价。而KG计算的DNN结构对噪声信号的分布是完全不变的，设计符合C.1挑战，如果具有先验统计知识，则可以将其纳入神经结构。例如，可以将噪声协方差的不同知识结合到[ 32 ]的架构2中，或者使用[ 48 ]中提出的DNN流程。我们将对Latent - KalmanNet的这些扩展的研究留给未来的研究。"},{"title":"notes","path":"/2025/07/18/index/","content":"sssdadasda"},{"path":"/2025/07/18/test/","content":""},{"path":"/2025/07/18/Linux工具/","content":"Linux工具 1.vscod 应用中心直接下载安装 插件： chinese vim python codesnap docker git graph jupyter project 2.typora 2.1下载安装typora wget -qO - https://typoraio.cn/linux/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/typora.asc sudo add-apt-repository 'deb https://typoraio.cn/linux ./' sudo apt-get update sudo apt-get install typora 安装完成： 2.2配置激活 利用git克隆’Yporaject’ sudo apt install gitgit clone git@github.com:hazukieq/Yporaject.git sudo apt install cargo cd Yporaject/ cargo build 克隆完成 查看是否有所需文件 ls target/debug##看看结果有没有 node_injectcargo runsudo cp target/debug/node_inject /usr/share/typora 新开一个终端执行下面代码： cd /usr/share/typora/sudo chmod 777 node_injectsudo ./node_inject ##下方将打印就对啦extracting node_modules.asaradding hook.jsapplying patchpacking node_modules.asardone!## 返回前面终端获取激活码 cd license-gen/cargo buildcargo run 激活码如下： 进入typora利用上面得到的激活码进行激活，等待一段时间选择确定 激活成功 2.3问题 突然出现许可证失败 个人解决方案： 卸载现在版本： sudo apt remove typora#删除其配置可用#sudo apt purge typorarm -rf ~/.config/typorarm -rf ~/.cache/typora 下载低版本（成功案例为1.8.10） wget https://download2.typoraio.cn/linux/typora_1.8.10_amd64.debsudo dpkg -i typora_1.8.10_amd64.deb 重新执行前面的安装步骤，但是在使用cargo build之前，要清除之前创建的缓存记录（重中之重）： cargo cleancargo update 3.zotero 3.1下载及安装 https://www.zotero.org/download/ 解压完成进入下载/Zotero-7.0.12_linux-x86_64打开终端。 创建目录 sudo mkdir /opt/zotero 将解压后的文件移至与浏览器同目录下/opt/ # Zotero_linux-x86_64是解压的zotero所有sudo mv Zotero_linux-x86_64/* /opt/zotero/ 更新zotero桌面位置 cd /opt/zoterosudo ./set_launcher_icon 执行文件即可打开 ./zotero 生成快捷图表 sudo apt install vimsudo vim zotero.desktop##下面是需要修改的文件内容[Desktop Entry]Name=ZoteroExec=bash /opt/zotero/zotero //这里把执行路径改为绝对路径Icon=/opt/zotero/chrome/icons/default/default256.pngType=ApplicationTerminal=falseCategories=Office;MimeType=text/plain ln -s /opt/zotero/zotero.desktop ~/.local/share/applications/zotero.desktop 3.2数据同步 4.坚果云 方法一 https://www.jianguoyun.com/s/downloads/linux下载安装包 方法二 deb包安装及解决依赖方法 使用gdebi安装，自动安装依赖 sudo apt isntall gdebisudo gdebi nautilus_nutstore_amd64.deb ubuntu双击使用软件中心安装，自动安装依赖 使用dpkg安装，使用apt-get -f install安装依赖 sudo dpkg -i nautilus_nutstore_amd64.debsudo apt-get install -f 5.edge 方法一 官网直接下载https://www.microsoft.com/zh-cn/edge/?form=MA13FJ，解压即可安装： sudo dpkg -i microsoft-edge-stable_133.0.3065.69-1_amd64.deb 方法二 ubuntu的安装命令： ## Setupcurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor microsoft.gpgsudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main\" /etc/apt/sources.list.d/microsoft-edge-dev.list'sudo rm microsoft.gpg## Installsudo apt updatesudo apt install microsoft-edge-dev 6.QQ 5.1下载安装包 选择合适的.deb版本文件https://im.qq.com/linuxqq/index.shtml 5.2安装 sudo dpkg -i example.deb 7.anaconda 6.1下载及安装 下载链接 https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh 到安装包所在路径打开终端 添加权限 chmod +x Anaconda3-2024.10-1-Linux-x86_64.sh 运行.sh脚本 ./Anaconda3-2024.10-1-Linux-x86_64.sh 按q跳过，选择yes 选择默认安装地址： anaconda默认安装地址 6.2问题 终端未找到conda指令 终端输入以下命令编辑bash配置文件 nano ~/.bashrc 最后一行加入地址 export PATH=/home/用户名/anaconda3/bin:$PATH ctrl+X 保存退出 重置配置文件使其生效 source ~./bashrc 关闭终端默认打开base环境 conda config --set auto_activate_base false"},{"path":"/2025/07/18/KalmanNet/","content":"KalmanNet: Neural Network Aided Kalman Filtering for Partially Known Dynamics 针对已知部分动态系统的神经网络辅助的卡尔曼滤波。”作者将RNN(recurrent neural network)和MB-KF(model based kalman filter)进行结合，提出了一种新的滤波方案KalmanNet，具体来说就是在每一时刻通过RNN预测卡尔曼增益K，其余操作与传统卡尔曼滤波五个公式保持一致。 1. 研究背景与问题 核心问题：传统卡尔曼滤波（KF）及其非线性变体（EKF、UKF）依赖精确的状态空间（SS）模型和噪声统计特性（Q,R），而实际系统中模型常存在非线性或部分未知（如噪声统计未知、动态方程近似）。 现有方法局限： 模型驱动（MB）方法：对模型失配敏感，鲁棒性差。 数据驱动（DD）方法（如RNN）：需大量数据和参数，缺乏可解释性，计算复杂度高。 目标：提出KalmanNet——融合MB与DD的混合框架，在部分已知动态下实现高效、鲁棒的状态估计。 2. KalmanNet 2.1 MB-KF 针对线性系统的经典卡尔曼滤波公式总结如下： ​ 预测 ​ 更新 2.2 System Model 该篇文章考虑的系统模型如下式4： f(⋅)和h(⋅)表示可能的非线性函数。 2.3 KalmanNet 假设动态系统部分已知，及式4存在模型失配，且噪声Q和R未知，KalmanNet不依赖噪声分布，无需对二阶矩进行量式计算，通过RNN固有内存允许隐式跟踪二阶统计矩Q和R，而Kt通过RNN从数据中学习。 2.3.1 整体架构 设计思想：保留KF的递归结构，用RNN替代对噪声统计敏感的卡尔曼增益（KG） 计算模块。 关键公式： 预测步骤 状态估计更新（同EKF）： KG计算：原KF中 Double subscripts: use braces to clarify K_k = _k H^T_k (H_k _k H^T_k + R_k)^{-1} ，现由RNN学习。 2.3.2 RNN输入特征设计 选取与噪声统计相关的时序特征作为RNN输入： F1: 观测差值 Δỹ = yt − yt − 1; F2: 新息（Innovation）Δyt = yt − ŷt ∣ t − 1; F3: 状态后验差值 Δx̂t = x̂t ∣ t − x̂t − 1 ∣ t − 1; F4: 状态更新差值 Δx̂t = x̂t ∣ t − x̂t ∣ t − 1; 最佳组合：实验表明 {F1, F2, F4} 或 {F1, F3, F4} 效果最优。 2.3.3 RNN架构设计 架构#1（隐式跟踪统计矩）： 结构：全连接层 → GRU层 → 输出层（生成 Kt ∈ Rm × n）。 特点：参数量大（GRU隐藏层维度为 10(m2 + n2)），但灵活性高。 在MB-KF中的噪声特性主要表现为每一时刻的卡尔曼增益K，该方法直接训练递归神经网络RNN网络对卡尔曼增益k进行预测，替代增益计算步骤，其结构图如下所示： 架构#2（显式分解统计矩）： 结构：三个独立GRU分别跟踪 Q、Σt ∣ t − 1、St，按KF公式计算KG。 特点：参数量少（约2.5e4 vs. 5e5），可解释性强，但灵活性较低。 2.3.4 GRU(门控循环单元) 更行门决定了如何将新的输入信息与之前的记忆相结合 rt = σWt ⋅ [ht − 1, xt] 相关性门 → 定义前面记忆保存到当前时间步的量 h̃t = tanh(W ⋅ [rt * ht − 1, xt]) 节点状态 ht = (1 − zt) * ht − 1 + zt * h̃t 隐层输出 输出 当相关性门rt = 1，更新门zt = 0，就是标准的RNN模型 2.3.5 训练算法 损失函数：状态估计的均方误差（MSE）： 梯度计算：通过KG反向传播（链式法则）： 监督学习：利用标记数据集训练： 其中，N为轨迹数量。 训练策略： V1：标准BPTT（全轨迹训练）。 V2：截断BPTT（长轨迹分块，块内训练）。 V3：固定短轨迹训练（适用于快速收敛到稳态的系统，如线性SS模型）。 推荐：先用V2预热，再用V1微调。 优点 RNN从数据中学习，计算卡尔曼增益K时不依赖与噪声特性的先验知识，不需要计算Q和R，避免了矩阵求逆； KalmanNet中的滤波不依赖于序列长度； KalmanNet对于模型失配和非线性的SS模型，性能优于其他滤波方法。 缺点 需要标注数据进行训练； 3. 实验设计与结果 3.1 实验设置 评估指标：状态估计MSE（dB）。 Baseline： MB方法：KF、EKF、UKF、PF DD方法：Vanilla RNN、MB-RNN（融合部分模型） KalmanNet配置： C1: 架构#1 + {F2,F4} + V3训练 C2: 架构#1 + {F2,F4} + V1训练 C3: 架构#1 + {F1,F3,F4} + V2训练 C4: 架构#2 + 全特征 + V1训练 3.2 仿真 3.2.1线性状态空间模型（Linear State Space Model） state dimension: m observation dimension: n 状态演变矩阵F 观测矩阵H 观测纬度为2时，旋转不同角度α，得到Fα∘和Hα∘。 3.2.2 线性运动学模型（linear kinematic model） 考虑恒定加速度模型(Constant Acceleration Model,CA)和恒速模型（Constant Velocity Modle，CV），全信息为P, V, A,非全信息模型只知道位置状态P dim of state for CA model: m = 3 dim of state for CV mode: mcv = 2​ 时间步长： Δtgen = 1 × 10−2 状态演变矩阵： 观测矩阵： 齐次非齐次 噪声设置： 为缩放因子 3.2.3 Lorenz Atractor state dimension: m = 3 observation dimension: n = 3 时间步长： 泰勒展开项： 精确模型不精确模型 3.3 关键实验结果 场景 结论 线性SS模型（全信息） KalmanNet（C1）达到KF的MMSE界，且可迁移至长轨迹（训练 (T=20)，测试 (T=200)）。 线性SS模型（部分信息） 在状态演化矩阵 () 旋转失配（(^)）时，KalmanNet（C2）较KF提升3 dB。 非线性SS模型（正弦+多项式） 在噪声水平高时，KalmanNet（C4）超越EKF（图7）；模型失配下仍接近全信息性能（表IV）。 Lorenz吸引子（混沌系统） 在采样失配（连续→离散）时，KalmanNet（C4）MSE = -11.28 dB，显著优于EKF (-6.43 dB) 和PF (-5.34 dB)（表IX）。 真实数据（NCLT数据集） 里程计定位任务中，KalmanNet（C1）MSE = 22.2 dB，优于EKF (25.39 dB) 和RNN (40.21 dB)（表X），有效抑制漂移（图11）。"},{"path":"/notes/index.html","content":"sssdadasda"}]