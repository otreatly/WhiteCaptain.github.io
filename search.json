[{"path":"/2025/07/19/Latent-KalmanNet Learned kalman filtering for tracking from high dimensional signals/","content":"Latent-KalmanNet: Learned kalman filtering for tracking from high-dimensional signals 本文基于结合了RNN的卡尔曼网络进行优化，增强了其处理高纬度信号的能力。 1. 问题描述 SS模型 yt可以用于恢复xt中p ≤ m，给定一个p × 1的向量PXT，其中P是一个p × m的选择矩阵。 该论文考虑部分可观测设置，因为可以通过令P = I和p = m使得模型的状态全部可观测，并且假设状态方差可以从yt中得到，P给出已知，即对于当前系统具有可观察到的状态变量的所有信息。 本文目标及挑战 设计一种实时状态估计的过滤算法，可应用于完全或部分可观测的SS模型，给定估计器的性能指标，x̂t使用均方误差(MSE)，定义为： E{||X̂T − XT||2} 挑战 内容 C.1 et和vt分布未知，可能为非高斯分布 C.2 使用的状态转换函数f(⋅)可能不匹配 C.3 观测维度维度高，n ≫ m，导致高复杂性影响实用性 C.4 测量函数h(⋅)未知，并且可能是非初级的。"},{"title":"notes","path":"/2025/07/18/index/","content":"sssdadasda"},{"path":"/2025/07/18/test/","content":""},{"path":"/2025/07/18/Linux工具/","content":"Linux工具 1.vscod 应用中心直接下载安装 插件： chinese vim python codesnap docker git graph jupyter project 2.typora 2.1下载安装typora wget -qO - https://typoraio.cn/linux/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/typora.asc sudo add-apt-repository 'deb https://typoraio.cn/linux ./' sudo apt-get update sudo apt-get install typora 安装完成： 截图 2025-02-19 17-31-27 2.2配置激活 利用git克隆’Yporaject’ sudo apt install gitgit clone git@github.com:hazukieq/Yporaject.git sudo apt install cargo cd Yporaject/ cargo build 克隆完成 截图 2025-02-19 17-42-03 查看是否有所需文件 ls target/debug##看看结果有没有 node_injectcargo runsudo cp target/debug/node_inject /usr/share/typora 新开一个终端执行下面代码： cd /usr/share/typora/sudo chmod 777 node_injectsudo ./node_inject ##下方将打印就对啦extracting node_modules.asaradding hook.jsapplying patchpacking node_modules.asardone!## 返回前面终端获取激活码 cd license-gen/cargo buildcargo run 激活码如下： 截图 2025-02-19 17-43-49 进入typora利用上面得到的激活码进行激活，等待一段时间选择确定 截图 2025-02-19 17-48-58 激活成功 截图 2025-02-19 17-50-17 2.3问题 突然出现许可证失败 个人解决方案： 卸载现在版本： sudo apt remove typora#删除其配置可用#sudo apt purge typorarm -rf ~/.config/typorarm -rf ~/.cache/typora 下载低版本（成功案例为1.8.10） wget https://download2.typoraio.cn/linux/typora_1.8.10_amd64.debsudo dpkg -i typora_1.8.10_amd64.deb 重新执行前面的安装步骤，但是在使用cargo build之前，要清除之前创建的缓存记录（重中之重）： cargo cleancargo update 3.zotero 3.1下载及安装 https://www.zotero.org/download/ 解压完成进入下载/Zotero-7.0.12_linux-x86_64打开终端。 创建目录 sudo mkdir /opt/zotero 将解压后的文件移至与浏览器同目录下/opt/ # Zotero_linux-x86_64是解压的zotero所有sudo mv Zotero_linux-x86_64/* /opt/zotero/ 更新zotero桌面位置 cd /opt/zoterosudo ./set_launcher_icon 执行文件即可打开 ./zotero 生成快捷图表 sudo apt install vimsudo vim zotero.desktop##下面是需要修改的文件内容[Desktop Entry]Name=ZoteroExec=bash /opt/zotero/zotero //这里把执行路径改为绝对路径Icon=/opt/zotero/chrome/icons/default/default256.pngType=ApplicationTerminal=falseCategories=Office;MimeType=text/plain ln -s /opt/zotero/zotero.desktop ~/.local/share/applications/zotero.desktop 3.2数据同步 4.坚果云 方法一 https://www.jianguoyun.com/s/downloads/linux下载安装包 方法二 deb包安装及解决依赖方法 使用gdebi安装，自动安装依赖 sudo apt isntall gdebisudo gdebi nautilus_nutstore_amd64.deb ubuntu双击使用软件中心安装，自动安装依赖 使用dpkg安装，使用apt-get -f install安装依赖 sudo dpkg -i nautilus_nutstore_amd64.debsudo apt-get install -f 4.edge 方法一 官网直接下载https://www.microsoft.com/zh-cn/edge/?form=MA13FJ，解压即可安装： sudo dpkg -i microsoft-edge-stable_133.0.3065.69-1_amd64.deb 方法二 ubuntu的安装命令： ## Setupcurl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor microsoft.gpgsudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main\" /etc/apt/sources.list.d/microsoft-edge-dev.list'sudo rm microsoft.gpg## Installsudo apt updatesudo apt install microsoft-edge-dev 5.QQ 5.1下载安装包 选择合适的.deb版本文件https://im.qq.com/linuxqq/index.shtml 5.2安装 sudo dpkg -i example.deb 6.anaconda 6.1下载及安装 下载链接 https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-x86_64.sh 到安装包所在路径打开终端 添加权限 chmod +x Anaconda3-2024.10-1-Linux-x86_64.sh 运行.sh脚本 ./Anaconda3-2024.10-1-Linux-x86_64.sh 按q跳过，选择yes 截图 2025-02-19 18-36-15 选择默认安装地址： 截图 2025-02-19 18-37-14 6.2问题 终端未找到conda指令 终端输入以下命令编辑bash配置文件 nano ~/.bashrc 最后一行加入地址 export PATH=/home/用户名/anaconda3/bin:$PATH ctrl+X 保存退出 重置配置文件使其生效 source ~./bashrc 关闭终端默认打开base环境 conda config --set auto_activate_base false","tags":["Linux"]},{"path":"/2025/07/18/KalmanNet/","content":"KalmanNet: Neural Network Aided Kalman Filtering for Partially Known Dynamics 针对已知部分动态系统的神经网络辅助的卡尔曼滤波。”作者将RNN(recurrent neural network)和MB-KF(model based kalman filter)进行结合，提出了一种新的滤波方案KalmanNet，具体来说就是在每一时刻通过RNN预测卡尔曼增益K，其余操作与传统卡尔曼滤波五个公式保持一致。 1. 研究背景与问题 核心问题：传统卡尔曼滤波（KF）及其非线性变体（EKF、UKF）依赖精确的状态空间（SS）模型和噪声统计特性（Q,R），而实际系统中模型常存在非线性或部分未知（如噪声统计未知、动态方程近似）。 现有方法局限： 模型驱动（MB）方法：对模型失配敏感，鲁棒性差。 数据驱动（DD）方法（如RNN）：需大量数据和参数，缺乏可解释性，计算复杂度高。 目标：提出KalmanNet——融合MB与DD的混合框架，在部分已知动态下实现高效、鲁棒的状态估计。 2. KalmanNet 2.1 MB-KF 针对线性系统的经典卡尔曼滤波公式总结如下： ​ 预测 ​ 更新 2.2 System Model 该篇文章考虑的系统模型如下式4： f(⋅)和h(⋅)表示可能的非线性函数。 2.3 KalmanNet 假设动态系统部分已知，及式4存在模型失配，且噪声Q和R未知，KalmanNet不依赖噪声分布，无需对二阶矩进行量式计算，通过RNN固有内存允许隐式跟踪二阶统计矩Q和R，而Kt通过RNN从数据中学习。 2.3.1 整体架构 设计思想：保留KF的递归结构，用RNN替代对噪声统计敏感的卡尔曼增益（KG） 计算模块。 关键公式： 预测步骤 状态估计更新（同EKF）： KG计算：原KF中 Double subscripts: use braces to clarify K_k = _k H^T_k (H_k _k H^T_k + R_k)^{-1} ，现由RNN学习。 2.3.2 RNN输入特征设计 选取与噪声统计相关的时序特征作为RNN输入： F1: 观测差值 Δỹ = yt − yt − 1; F2: 新息（Innovation）Δyt = yt − ŷt ∣ t − 1; F3: 状态后验差值 Δx̂t = x̂t ∣ t − x̂t − 1 ∣ t − 1; F4: 状态更新差值 Δx̂t = x̂t ∣ t − x̂t ∣ t − 1; 最佳组合：实验表明 {F1, F2, F4} 或 {F1, F3, F4} 效果最优。 2.3.3 RNN架构设计 架构#1（隐式跟踪统计矩）： 结构：全连接层 → GRU层 → 输出层（生成 Kt ∈ Rm × n）。 特点：参数量大（GRU隐藏层维度为 10(m2 + n2)），但灵活性高。 在MB-KF中的噪声特性主要表现为每一时刻的卡尔曼增益K，该方法直接训练递归神经网络RNN网络对卡尔曼增益k进行预测，替代增益计算步骤，其结构图如下所示： 架构#2（显式分解统计矩）： 结构：三个独立GRU分别跟踪 Q、Σt ∣ t − 1、St，按KF公式计算KG。 特点：参数量少（约2.5e4 vs. 5e5），可解释性强，但灵活性较低。 2.3.4 GRU(门控循环单元) 更行门决定了如何将新的输入信息与之前的记忆相结合 rt = σWt ⋅ [ht − 1, xt] 相关性门 → 定义前面记忆保存到当前时间步的量 h̃t = tanh(W ⋅ [rt * ht − 1, xt]) 节点状态 ht = (1 − zt) * ht − 1 + zt * h̃t 隐层输出 输出 当相关性门rt = 1，更新门zt = 0，就是标准的RNN模型 2.3.5 训练算法 损失函数：状态估计的均方误差（MSE）： 梯度计算：通过KG反向传播（链式法则）： 监督学习：利用标记数据集训练： 其中，N为轨迹数量。 训练策略： V1：标准BPTT（全轨迹训练）。 V2：截断BPTT（长轨迹分块，块内训练）。 V3：固定短轨迹训练（适用于快速收敛到稳态的系统，如线性SS模型）。 推荐：先用V2预热，再用V1微调。 优点 RNN从数据中学习，计算卡尔曼增益K时不依赖与噪声特性的先验知识，不需要计算Q和R，避免了矩阵求逆； KalmanNet中的滤波不依赖于序列长度； KalmanNet对于模型失配和非线性的SS模型，性能优于其他滤波方法。 缺点 需要标注数据进行训练； 3. 实验设计与结果 3.1 实验设置 评估指标：状态估计MSE（dB）。 Baseline： MB方法：KF、EKF、UKF、PF DD方法：Vanilla RNN、MB-RNN（融合部分模型） KalmanNet配置： C1: 架构#1 + {F2,F4} + V3训练 C2: 架构#1 + {F2,F4} + V1训练 C3: 架构#1 + {F1,F3,F4} + V2训练 C4: 架构#2 + 全特征 + V1训练 3.2 仿真 3.2.1线性状态空间模型（Linear State Space Model） state dimension: m observation dimension: n 状态演变矩阵F 观测矩阵H 观测纬度为2时，旋转不同角度α，得到Fα∘和Hα∘。 3.2.2 线性运动学模型（linear kinematic model） 考虑恒定加速度模型(Constant Acceleration Model,CA)和恒速模型（Constant Velocity Modle，CV），全信息为P, V, A,非全信息模型只知道位置状态P dim of state for CA model: m = 3 dim of state for CV mode: mcv = 2​ 时间步长： Δtgen = 1 × 10−2 状态演变矩阵： 观测矩阵： 齐次非齐次 噪声设置： 为缩放因子 3.2.3 Lorenz Atractor state dimension: m = 3 observation dimension: n = 3 时间步长： 泰勒展开项： 精确模型不精确模型 3.3 关键实验结果 场景 结论 线性SS模型（全信息） KalmanNet（C1）达到KF的MMSE界，且可迁移至长轨迹（训练 (T=20)，测试 (T=200)）。 线性SS模型（部分信息） 在状态演化矩阵 () 旋转失配（(^)）时，KalmanNet（C2）较KF提升3 dB。 非线性SS模型（正弦+多项式） 在噪声水平高时，KalmanNet（C4）超越EKF（图7）；模型失配下仍接近全信息性能（表IV）。 Lorenz吸引子（混沌系统） 在采样失配（连续→离散）时，KalmanNet（C4）MSE = -11.28 dB，显著优于EKF (-6.43 dB) 和PF (-5.34 dB)（表IX）。 真实数据（NCLT数据集） 里程计定位任务中，KalmanNet（C1）MSE = 22.2 dB，优于EKF (25.39 dB) 和RNN (40.21 dB)（表X），有效抑制漂移（图11）。"},{"path":"/notes/index.html","content":"sssdadasda"}]